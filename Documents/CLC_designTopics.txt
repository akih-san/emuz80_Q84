オリジナルのemuz80はPIC18F47Q43を使用しており、
解説書もそれに従っています。
オレンジピコより基盤と部品一式が販売されていますが、
私が購入した際には、諸般の事情によりPIC18F47Q84に変更されて
いました。

Q43に比べて、RAMの容量が大きくなっているので、有効活用したい
なと思ったのが、変更の動機です。
今回、Q84のRAMの96%程度使用し、emuz80に12KのRAM領域を解放しました。
また、ROMも大容量ですので、Z80で目一杯に拡張し48KB割り当てました。
ほぼZ80の全メモリ空間がQ84で割り当てられています。

（メモリマップ）

0000H - BFFFH : ROM(48K)
C000H - EFFFH : RAM(12K)
F000H - FFFFH : I/O(4K)

UART Data reg : FF00H
Uart Ctl  reg : FF01h

（CLCの設計）

PICマイコンは、今回初めて触るので、全く知識がありません。
emuz80の要となるCLC制御ですが、電脳伝説さんの解説の理解から
初めました。データシートを見ましたが、理解するまでには結構
時間がかかりました。Q84のデータシートのCLCの部分はロジック
セレクトレジスタのビットアサインの説明に大きな間違いがあり、
理解不能の状態に陥っていましたが、Q43のデータシートを見て
納得しました。Q84のデータシートを早く更新してもらいたいもの
です。

CLCの設計はVer.1とVer.2があります。

基本的な考え方は、アドレスデコード、ROM、RAMの切り分けを
CLCで受け持ち、ファームの対応はデータ転送だけにして
ファームの作業量を極力小さくするというものです。

Ver.1は、電脳伝説さんの解説のCLC1をベースに勉強を兼ねて
拡張しました。一応動作することを確認しておりますが、
RDのDFF入力に対するセットアップタイムを確保しないとダメ
なことなどは、カットアンドトライで分かってきたことです。
ファームのprintfが無かったら、開発を進められなかったです。
ロジアナなんぞは持っていませんしね。printf最強です（笑）

Ver.2はGazelleさんのemuz80_cpzを参考にしています。CLCが分かって
きたところで、GazelleさんのCLCを図面に落としてみて、こっちの
方が断然いいじゃん！ということで、ベースをパクらせてもらいました。
当然アドレスが違うので、再設計となります。


（苦労した点）
Ver.2のデバッグを進めて分かったというか、ロジアナが無いのでロジカル
思考での結論ですが、Z80がオペコードの読み込み後、16ビットつまり
2バイトのメモリリードを実行する命令を実行するときには、１バイト目
の読み込みが終了してMREQが立ち上がるより前にRDが立ち上がるようです。

最初、RAMライトの回路構成は、RAMリード構成と全く同じで、RD信号だけが反転
入力でクロックにゲートロジックを組む構成でした。
RAMリードのクロックはMREQ、RD共に負論理なのでパルスが発生しないのですが、
RDを反転したRAMライトの構成の場合、タイミングによってはパルス
が出来てDFFを叩いてしまう不安があったのですが、的中したようです。

MREQが立ち上がるより先にRDが立ち上がると、
パルスが発生する構成でした。このため、誤動作します。
これが分かるまでには、ずいぶん悩まされました。

最終バージョンのRAMライトの回路構成はRDをDFFの入力側に入れて誤動作を
回避するようにしました。

ファームはC言語で書いてあります。PICのアセンブラはまだ勉強していない
のでさっぱりです。ASCIIART.BASのタイムアタックでは1241秒と、オリジナル
よりは早いですが、ファームをアセンブラで書き直したらもっと早くなる
でしょう。誰かやってくれないかなぁ〜


（今後について）
ちなみに、今考えていることは、PICのTIMER0をZ80からメモリマップI/Oとして
見えるようにして、ストップウォッチ見ないなものが出来ないかなぁ〜と
思案中〜
後は、unimonの拡張ですね〜
